kwExport(1:1-1:7): export
kwClass(1:8-1:13): class
litId(1:14-1:20): Buffer
opLBrace(1:21-1:22): {
kwPub(2:3-2:6): pub
litId(2:7-2:12): empty
opColon(2:12-2:13): :
litId(2:14-2:18): bool
kwPub(3:3-3:6): pub
litId(3:7-3:10): len
opColon(3:10-3:11): :
litId(3:12-3:15): int
kwMut(5:3-5:6): mut
kwOp(5:7-5:9): op
opPlusEq(5:10-5:12): +=
opLPar(5:13-5:14): (
litId(5:14-5:17): rhs
opColon(5:17-5:18): :
litId(5:19-5:21): i8
opLBrack(5:21-5:22): [
opRBrack(5:22-5:23): ]
opRPar(5:23-5:24): )
kwThis(5:25-5:29): this
kwMut(6:3-6:6): mut
kwOp(6:7-6:9): op
opPlusEq(6:10-6:12): +=
opLPar(6:13-6:14): (
litId(6:14-6:17): rhs
opColon(6:17-6:18): :
litId(6:19-6:22): i16
opLBrack(6:22-6:23): [
opRBrack(6:23-6:24): ]
opRPar(6:24-6:25): )
kwThis(6:26-6:30): this
kwMut(7:3-7:6): mut
kwOp(7:7-7:9): op
opPlusEq(7:10-7:12): +=
opLPar(7:13-7:14): (
litId(7:14-7:17): rhs
opColon(7:17-7:18): :
litId(7:19-7:22): i32
opLBrack(7:22-7:23): [
opRBrack(7:23-7:24): ]
opRPar(7:24-7:25): )
kwThis(7:26-7:30): this
kwMut(8:3-8:6): mut
kwOp(8:7-8:9): op
opPlusEq(8:10-8:12): +=
opLPar(8:13-8:14): (
litId(8:14-8:17): rhs
opColon(8:17-8:18): :
litId(8:19-8:22): i64
opLBrack(8:22-8:23): [
opRBrack(8:23-8:24): ]
opRPar(8:24-8:25): )
kwThis(8:26-8:30): this
kwMut(9:3-9:6): mut
kwOp(9:7-9:9): op
opPlusEq(9:10-9:12): +=
opLPar(9:13-9:14): (
litId(9:14-9:17): rhs
opColon(9:17-9:18): :
litId(9:19-9:22): str
opRPar(9:22-9:23): )
kwThis(9:24-9:28): this
kwMut(10:3-10:6): mut
kwOp(10:7-10:9): op
opPlusEq(10:10-10:12): +=
opLPar(10:13-10:14): (
litId(10:14-10:17): rhs
opColon(10:17-10:18): :
litId(10:19-10:21): u8
opLBrack(10:21-10:22): [
opRBrack(10:22-10:23): ]
opRPar(10:23-10:24): )
kwThis(10:25-10:29): this
kwMut(11:3-11:6): mut
kwOp(11:7-11:9): op
opPlusEq(11:10-11:12): +=
opLPar(11:13-11:14): (
litId(11:14-11:17): rhs
opColon(11:17-11:18): :
litId(11:19-11:22): u16
opLBrack(11:22-11:23): [
opRBrack(11:23-11:24): ]
opRPar(11:24-11:25): )
kwThis(11:26-11:30): this
kwMut(12:3-12:6): mut
kwOp(12:7-12:9): op
opPlusEq(12:10-12:12): +=
opLPar(12:13-12:14): (
litId(12:14-12:17): rhs
opColon(12:17-12:18): :
litId(12:19-12:22): u32
opLBrack(12:22-12:23): [
opRBrack(12:23-12:24): ]
opRPar(12:24-12:25): )
kwThis(12:26-12:30): this
kwMut(13:3-13:6): mut
kwOp(13:7-13:9): op
opPlusEq(13:10-13:12): +=
opLPar(13:13-13:14): (
litId(13:14-13:17): rhs
opColon(13:17-13:18): :
litId(13:19-13:22): u64
opLBrack(13:22-13:23): [
opRBrack(13:23-13:24): ]
opRPar(13:24-13:25): )
kwThis(13:26-13:30): this
kwOp(14:3-14:5): op
opLBrack(14:6-14:7): [
opRBrack(14:7-14:8): ]
opLPar(14:9-14:10): (
litId(14:10-14:11): i
opColon(14:11-14:12): :
litId(14:13-14:16): int
opRPar(14:16-14:17): )
litId(14:18-14:22): byte
kwMut(15:3-15:6): mut
kwOp(15:7-15:9): op
opLBrack(15:10-15:11): [
opRBrack(15:11-15:12): ]
opLPar(15:13-15:14): (
litId(15:14-15:15): i
opColon(15:15-15:16): :
litId(15:17-15:20): int
opRPar(15:20-15:21): )
kwMut(15:22-15:25): mut
litId(15:26-15:30): byte
kwPub(17:3-17:6): pub
kwMut(17:7-17:10): mut
kwFn(17:11-17:13): fn
litId(17:14-17:19): times
opLPar(17:20-17:21): (
litId(17:21-17:22): b
opColon(17:22-17:23): :
litId(17:24-17:28): byte
opComma(17:28-17:29): ,
litId(17:30-17:31): x
opColon(17:31-17:32): :
litId(17:33-17:36): int
opRPar(17:36-17:37): )
kwThis(17:38-17:42): this
kwPub(18:3-18:6): pub
kwFn(18:7-18:9): fn
litId(18:10-18:17): toArray
opLPar(18:18-18:19): (
opRPar(18:19-18:20): )
litId(18:21-18:25): byte
opLBrack(18:25-18:26): [
opRBrack(18:26-18:27): ]
opRBrace(19:1-19:2): }
