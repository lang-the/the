KW_EXPORT: export
KW_ENUM: enum
LIT_ID: Signal
OP_LBRACE: {
LIT_ID: abrt
OP_COMMA: ,
LIT_ID: alrm
OP_COMMA: ,
LIT_ID: brk
OP_COMMA: ,
LIT_ID: bus
OP_COMMA: ,
LIT_ID: chld
OP_COMMA: ,
LIT_ID: cont
OP_COMMA: ,
LIT_ID: fpe
OP_COMMA: ,
LIT_ID: hup
OP_COMMA: ,
LIT_ID: ill
OP_COMMA: ,
LIT_ID: int
OP_COMMA: ,
LIT_ID: io
OP_COMMA: ,
LIT_ID: kill
OP_COMMA: ,
LIT_ID: lost
OP_COMMA: ,
LIT_ID: pipe
OP_COMMA: ,
LIT_ID: prof
OP_COMMA: ,
LIT_ID: pwr
OP_COMMA: ,
LIT_ID: quit
OP_COMMA: ,
LIT_ID: segv
OP_COMMA: ,
LIT_ID: stkflt
OP_COMMA: ,
LIT_ID: stop
OP_COMMA: ,
LIT_ID: sys
OP_COMMA: ,
LIT_ID: term
OP_COMMA: ,
LIT_ID: trap
OP_COMMA: ,
LIT_ID: tstp
OP_COMMA: ,
LIT_ID: ttin
OP_COMMA: ,
LIT_ID: ttou
OP_COMMA: ,
LIT_ID: urg
OP_COMMA: ,
LIT_ID: usr1
OP_COMMA: ,
LIT_ID: usr2
OP_COMMA: ,
LIT_ID: vtalrm
OP_COMMA: ,
LIT_ID: winch
OP_COMMA: ,
LIT_ID: xcpu
OP_COMMA: ,
LIT_ID: xfsz
OP_RBRACE: }
KW_INTERFACE: interface
LIT_ID: Any
OP_LBRACE: {
KW_OP: op
LIT_ID: str
OP_LPAR: (
OP_RPAR: )
LIT_ID: str
OP_RBRACE: }
KW_INTERFACE: interface
LIT_ID: Array
OP_LT: <
LIT_ID: T
OP_GT: >
OP_COLON: :
LIT_ID: Any
OP_LBRACE: {
LIT_ID: empty
OP_COLON: :
LIT_ID: bool
LIT_ID: len
OP_COLON: :
LIT_ID: int
KW_OP: op
OP_PLUS: +
OP_LPAR: (
LIT_ID: rhs
OP_COLON: :
LIT_ID: T
OP_RPAR: )
LIT_ID: Array
OP_LT: <
LIT_ID: T
OP_GT: >
KW_OP: op
OP_PLUS: +
OP_LPAR: (
LIT_ID: rhs
OP_COLON: :
LIT_ID: Array
OP_LT: <
LIT_ID: T
OP_GT: >
OP_RPAR: )
LIT_ID: Array
OP_LT: <
LIT_ID: T
OP_GT: >
KW_MUT: mut
KW_OP: op
OP_PLUSEQ: +=
OP_LPAR: (
LIT_ID: rhs
OP_COLON: :
LIT_ID: T
OP_RPAR: )
KW_THIS: this
KW_MUT: mut
KW_OP: op
OP_PLUSEQ: +=
OP_LPAR: (
LIT_ID: rhs
OP_COLON: :
LIT_ID: Array
OP_LT: <
LIT_ID: T
OP_GT: >
OP_RPAR: )
KW_THIS: this
KW_OP: op
OP_LBRACK: [
OP_RBRACK: ]
OP_LPAR: (
LIT_ID: i
OP_COLON: :
LIT_ID: int
OP_RPAR: )
LIT_ID: T
KW_MUT: mut
KW_OP: op
OP_LBRACK: [
OP_RBRACK: ]
OP_LPAR: (
LIT_ID: i
OP_COLON: :
LIT_ID: int
OP_RPAR: )
KW_MUT: mut
LIT_ID: T
KW_OP: op
OP_LBRACK: [
OP_RBRACK: ]
OP_LPAR: (
LIT_ID: slice
OP_COLON: :
LIT_ID: Slice
OP_RPAR: )
LIT_ID: Array
OP_LT: <
LIT_ID: T
OP_GT: >
KW_OP: op
LIT_ID: iter
OP_LPAR: (
OP_RPAR: )
LIT_ID: Iterator
OP_LT: <
LIT_ID: int
OP_COMMA: ,
LIT_ID: T
OP_GT: >
KW_MUT: mut
KW_OP: op
LIT_ID: iter
OP_LPAR: (
OP_RPAR: )
LIT_ID: Iterator
OP_LT: <
LIT_ID: int
OP_COMMA: ,
KW_MUT: mut
LIT_ID: T
OP_GT: >
LIT_ID: includes
OP_LPAR: (
LIT_ID: x
OP_COLON: :
LIT_ID: T
OP_RPAR: )
LIT_ID: bool
LIT_ID: index
OP_LPAR: (
LIT_ID: x
OP_COLON: :
LIT_ID: T
OP_RPAR: )
LIT_ID: int
OP_QN: ?
KW_MUT: mut
LIT_ID: pop
OP_LPAR: (
OP_RPAR: )
LIT_ID: T
OP_QN: ?
KW_MUT: mut
LIT_ID: push
OP_LPAR: (
LIT_ID: n
OP_COLON: :
LIT_ID: T
OP_RPAR: )
KW_THIS: this
KW_MUT: mut
LIT_ID: remove
OP_LPAR: (
LIT_ID: at
OP_COLON: :
LIT_ID: int
OP_RPAR: )
LIT_ID: T
KW_MUT: mut
LIT_ID: reverse
OP_LPAR: (
OP_RPAR: )
KW_THIS: this
KW_MUT: mut
LIT_ID: shift
OP_LPAR: (
OP_RPAR: )
LIT_ID: T
OP_QN: ?
KW_MUT: mut
LIT_ID: unshift
OP_LPAR: (
LIT_ID: n
OP_COLON: :
LIT_ID: T
OP_RPAR: )
KW_THIS: this
OP_RBRACE: }
KW_INTERFACE: interface
LIT_ID: Boolean
OP_COLON: :
LIT_ID: Any
OP_LBRACE: {
OP_RBRACE: }
KW_INTERFACE: interface
LIT_ID: Byte
OP_COLON: :
LIT_ID: Any
OP_LBRACE: {
KW_OP: op
OP_PLUS: +
OP_LPAR: (
LIT_ID: rhs
OP_COLON: :
LIT_ID: byte
OP_RPAR: )
LIT_ID: byte
OP_RBRACE: }
KW_INTERFACE: interface
LIT_ID: Char
OP_COLON: :
LIT_ID: Any
OP_LBRACE: {
LIT_ID: digit
OP_COLON: :
LIT_ID: bool
KW_OP: op
OP_PLUS: +
OP_LPAR: (
LIT_ID: rhs
OP_COLON: :
LIT_ID: char
OP_RPAR: )
LIT_ID: str
KW_OP: op
OP_PLUS: +
OP_LPAR: (
LIT_ID: rhs
OP_COLON: :
LIT_ID: str
OP_RPAR: )
LIT_ID: str
LIT_ID: times
OP_LPAR: (
LIT_ID: n
OP_COLON: :
LIT_ID: int
OP_RPAR: )
LIT_ID: str
OP_RBRACE: }
KW_INTERFACE: interface
LIT_ID: Function
OP_COLON: :
LIT_ID: Any
OP_LBRACE: {
OP_RBRACE: }
KW_INTERFACE: interface
LIT_ID: Number
OP_COLON: :
LIT_ID: Any
OP_LBRACE: {
KW_OP: op
OP_PLUS: +
OP_LPAR: (
LIT_ID: rhs
OP_COLON: :
LIT_ID: Number
OP_RPAR: )
LIT_ID: Number
KW_OP: op
OP_PLUS: +
OP_LPAR: (
LIT_ID: rhs
OP_COLON: :
LIT_ID: char
OP_RPAR: )
LIT_ID: str
KW_OP: op
OP_PLUS: +
OP_LPAR: (
LIT_ID: rhs
OP_COLON: :
LIT_ID: str
OP_RPAR: )
LIT_ID: str
KW_OP: op
OP_MINUS: -
OP_LPAR: (
LIT_ID: rhs
OP_COLON: :
LIT_ID: Number
OP_RPAR: )
LIT_ID: Number
KW_OP: op
OP_SLASH: /
OP_LPAR: (
LIT_ID: rhs
OP_COLON: :
LIT_ID: Number
OP_RPAR: )
LIT_ID: Number
KW_OP: op
OP_STAR: *
OP_LPAR: (
LIT_ID: rhs
OP_COLON: :
LIT_ID: Number
OP_RPAR: )
LIT_ID: Number
KW_OP: op
OP_PERCENT: %
OP_LPAR: (
LIT_ID: rhs
OP_COLON: :
LIT_ID: Number
OP_RPAR: )
LIT_ID: Number
KW_MUT: mut
KW_OP: op
OP_PLUSEQ: +=
OP_LPAR: (
LIT_ID: rhs
OP_COLON: :
LIT_ID: Number
OP_RPAR: )
KW_THIS: this
KW_MUT: mut
KW_OP: op
OP_MINUSEQ: -=
OP_LPAR: (
LIT_ID: rhs
OP_COLON: :
LIT_ID: Number
OP_RPAR: )
KW_THIS: this
KW_MUT: mut
KW_OP: op
OP_SLASHEQ: /=
OP_LPAR: (
LIT_ID: rhs
OP_COLON: :
LIT_ID: Number
OP_RPAR: )
KW_THIS: this
KW_MUT: mut
KW_OP: op
OP_STAREQ: *=
OP_LPAR: (
LIT_ID: rhs
OP_COLON: :
LIT_ID: Number
OP_RPAR: )
KW_THIS: this
KW_MUT: mut
KW_OP: op
OP_PERCENTEQ: %=
OP_LPAR: (
LIT_ID: rhs
OP_COLON: :
LIT_ID: Number
OP_RPAR: )
KW_THIS: this
OP_RBRACE: }
KW_INTERFACE: interface
LIT_ID: Object
OP_COLON: :
LIT_ID: Any
OP_LBRACE: {
OP_RBRACE: }
KW_INTERFACE: interface
LIT_ID: Optional
OP_LT: <
LIT_ID: T
OP_GT: >
OP_COLON: :
LIT_ID: Any
OP_LBRACE: {
OP_RBRACE: }
KW_INTERFACE: interface
LIT_ID: Range
OP_COLON: :
LIT_ID: Any
OP_LBRACE: {
LIT_ID: end
OP_COLON: :
LIT_ID: int
LIT_ID: start
OP_COLON: :
LIT_ID: int
KW_OP: op
LIT_ID: iter
OP_LPAR: (
OP_RPAR: )
LIT_ID: Iterator
OP_LT: <
LIT_ID: int
OP_COMMA: ,
LIT_ID: int
OP_GT: >
KW_MUT: mut
KW_OP: op
LIT_ID: iter
OP_LPAR: (
OP_RPAR: )
LIT_ID: Iterator
OP_LT: <
LIT_ID: int
OP_COMMA: ,
KW_MUT: mut
LIT_ID: int
OP_GT: >
OP_RBRACE: }
KW_INTERFACE: interface
LIT_ID: Slice
OP_COLON: :
LIT_ID: Any
OP_LBRACE: {
LIT_ID: end
OP_COLON: :
LIT_ID: int
OP_QN: ?
LIT_ID: start
OP_COLON: :
LIT_ID: int
OP_QN: ?
LIT_ID: step
OP_COLON: :
LIT_ID: int
OP_QN: ?
OP_RBRACE: }
KW_INTERFACE: interface
LIT_ID: String
OP_COLON: :
LIT_ID: Any
OP_LBRACE: {
LIT_ID: empty
OP_COLON: :
LIT_ID: bool
LIT_ID: len
OP_COLON: :
LIT_ID: int
KW_OP: op
OP_PLUS: +
OP_LPAR: (
LIT_ID: rhs
OP_COLON: :
LIT_ID: char
OP_RPAR: )
LIT_ID: str
KW_OP: op
OP_PLUS: +
OP_LPAR: (
LIT_ID: rhs
OP_COLON: :
LIT_ID: str
OP_RPAR: )
LIT_ID: str
KW_MUT: mut
KW_OP: op
OP_PLUSEQ: +=
OP_LPAR: (
LIT_ID: rhs
OP_COLON: :
LIT_ID: char
OP_RPAR: )
KW_THIS: this
KW_MUT: mut
KW_OP: op
OP_PLUSEQ: +=
OP_LPAR: (
LIT_ID: rhs
OP_COLON: :
LIT_ID: str
OP_RPAR: )
KW_THIS: this
KW_OP: op
OP_LBRACK: [
OP_RBRACK: ]
OP_LPAR: (
LIT_ID: i
OP_COLON: :
LIT_ID: int
OP_RPAR: )
LIT_ID: char
KW_MUT: mut
KW_OP: op
OP_LBRACK: [
OP_RBRACK: ]
OP_LPAR: (
LIT_ID: i
OP_COLON: :
LIT_ID: int
OP_RPAR: )
KW_MUT: mut
LIT_ID: char
KW_OP: op
OP_LBRACK: [
OP_RBRACK: ]
OP_LPAR: (
LIT_ID: slice
OP_COLON: :
LIT_ID: Slice
OP_RPAR: )
LIT_ID: str
KW_OP: op
LIT_ID: iter
OP_LPAR: (
OP_RPAR: )
LIT_ID: Iterator
OP_LT: <
LIT_ID: int
OP_COMMA: ,
LIT_ID: char
OP_GT: >
KW_MUT: mut
KW_OP: op
LIT_ID: iter
OP_LPAR: (
OP_RPAR: )
LIT_ID: Iterator
OP_LT: <
LIT_ID: int
OP_COMMA: ,
KW_MUT: mut
LIT_ID: char
OP_GT: >
KW_MUT: mut
LIT_ID: clear
OP_LPAR: (
OP_RPAR: )
KW_THIS: this
LIT_ID: includes
OP_LPAR: (
LIT_ID: x
OP_COLON: :
LIT_ID: char
OP_RPAR: )
LIT_ID: bool
LIT_ID: includes
OP_LPAR: (
LIT_ID: x
OP_COLON: :
LIT_ID: str
OP_RPAR: )
LIT_ID: bool
LIT_ID: index
OP_LPAR: (
LIT_ID: x
OP_COLON: :
LIT_ID: char
OP_RPAR: )
LIT_ID: int
OP_QN: ?
LIT_ID: index
OP_LPAR: (
LIT_ID: x
OP_COLON: :
LIT_ID: str
OP_RPAR: )
LIT_ID: int
OP_QN: ?
KW_MUT: mut
LIT_ID: reverse
OP_LPAR: (
OP_RPAR: )
KW_THIS: this
LIT_ID: times
OP_LPAR: (
LIT_ID: n
OP_COLON: :
LIT_ID: int
OP_RPAR: )
LIT_ID: str
OP_RBRACE: }
KW_OBJ: obj
LIT_ID: Program
OP_LBRACE: {
LIT_ID: args
OP_COLON: :
LIT_ID: str
OP_LBRACK: [
OP_RBRACK: ]
LIT_ID: cwd
OP_COLON: :
LIT_ID: str
LIT_ID: env
OP_COLON: :
LIT_ID: Map
OP_LT: <
LIT_ID: str
OP_COMMA: ,
LIT_ID: str
OP_GT: >
LIT_ID: pid
OP_COLON: :
LIT_ID: int
OP_RBRACE: }
KW_EXPORT: export
KW_CLASS: class
LIT_ID: Error
OP_LBRACE: {
KW_PUB: pub
LIT_ID: message
OP_COLON: :
LIT_ID: str
KW_PUB: pub
LIT_ID: name
OP_COLON: :
LIT_ID: str
KW_INIT: init
OP_LPAR: (
LIT_ID: message
OP_COLON: :
LIT_ID: str
OP_RPAR: )
KW_THIS: this
OP_RBRACE: }
KW_EXPORT: export
KW_CLASS: class
LIT_ID: Iterator
OP_LT: <
LIT_ID: T
OP_COMMA: ,
LIT_ID: U
OP_GT: >
OP_LBRACE: {
KW_PUB: pub
LIT_ID: cursor
OP_COLON: :
LIT_ID: T
KW_PUB: pub
LIT_ID: hasNext
OP_LPAR: (
OP_RPAR: )
LIT_ID: bool
KW_PUB: pub
LIT_ID: next
OP_LPAR: (
OP_RPAR: )
LIT_ID: U
KW_PUB: pub
KW_MUT: mut
LIT_ID: next
OP_LPAR: (
OP_RPAR: )
KW_MUT: mut
LIT_ID: U
OP_RBRACE: }
KW_EXPORT: export
KW_CLASS: class
LIT_ID: Map
OP_LT: <
LIT_ID: T
OP_COMMA: ,
LIT_ID: U
OP_GT: >
OP_LBRACE: {
KW_PUB: pub
LIT_ID: size
OP_COLON: :
LIT_ID: int
KW_OP: op
LIT_ID: iter
OP_LPAR: (
OP_RPAR: )
LIT_ID: Iterator
OP_LT: <
LIT_ID: T
OP_COMMA: ,
LIT_ID: U
OP_GT: >
KW_MUT: mut
KW_OP: op
LIT_ID: iter
OP_LPAR: (
OP_RPAR: )
LIT_ID: Iterator
OP_LT: <
LIT_ID: T
OP_COMMA: ,
KW_MUT: mut
LIT_ID: U
OP_GT: >
KW_OP: op
LIT_ID: str
OP_LPAR: (
OP_RPAR: )
LIT_ID: str
KW_PUB: pub
KW_MUT: mut
LIT_ID: delete
OP_LPAR: (
LIT_ID: key
OP_COLON: :
LIT_ID: T
OP_RPAR: )
KW_THIS: this
KW_PUB: pub
LIT_ID: get
OP_LPAR: (
LIT_ID: key
OP_COLON: :
LIT_ID: T
OP_RPAR: )
LIT_ID: U
OP_QN: ?
KW_PUB: pub
KW_MUT: mut
LIT_ID: get
OP_LPAR: (
LIT_ID: key
OP_COLON: :
LIT_ID: T
OP_RPAR: )
KW_MUT: mut
LIT_ID: U
OP_QN: ?
KW_PUB: pub
LIT_ID: has
OP_LPAR: (
LIT_ID: key
OP_COLON: :
LIT_ID: T
OP_RPAR: )
LIT_ID: bool
KW_PUB: pub
KW_MUT: mut
LIT_ID: set
OP_LPAR: (
LIT_ID: key
OP_COLON: :
LIT_ID: T
OP_COMMA: ,
LIT_ID: val
OP_COLON: :
LIT_ID: U
OP_RPAR: )
KW_THIS: this
OP_RBRACE: }
KW_EXPORT: export
KW_FN: fn
LIT_ID: exit
OP_LPAR: (
LIT_ID: code
OP_COLON: :
LIT_ID: int
OP_RPAR: )
LIT_ID: void
KW_EXPORT: export
KW_FN: fn
LIT_ID: kill
OP_LPAR: (
LIT_ID: pid
OP_COLON: :
LIT_ID: int
OP_COMMA: ,
LIT_ID: sig
OP_COLONEQ: :=
LIT_ID: Signal
OP_DOT: .
LIT_ID: term
OP_RPAR: )
LIT_ID: void
KW_EXPORT: export
KW_FN: fn
LIT_ID: print
OP_LPAR: (
LIT_ID: items
OP_COLON: :
LIT_ID: any
OP_DOTDOTDOT: ...
OP_COMMA: ,
LIT_ID: separator
OP_COLONEQ: :=
LIT_STR: " "
OP_COMMA: ,
LIT_ID: terminator
OP_COLONEQ: :=
LIT_STR: "\n"
OP_RPAR: )
LIT_ID: void
KW_EXPORT: export
KW_FN: fn
LIT_ID: sleep
OP_LPAR: (
LIT_ID: ms
OP_COLON: :
LIT_ID: int
OP_RPAR: )
KW_ASYNC: async
LIT_ID: void
KW_EXPORT: export
LIT_ID: program
OP_COLON: :
LIT_ID: Program
