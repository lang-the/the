kwExport(1:1-1:7): export
kwEnum(1:8-1:12): enum
litId(1:13-1:19): Signal
opLBrace(1:20-1:21): {
litId(2:3-2:7): abrt
opComma(2:7-2:8): ,
litId(3:3-3:7): alrm
opComma(3:7-3:8): ,
litId(4:3-4:6): brk
opComma(4:6-4:7): ,
litId(5:3-5:6): bus
opComma(5:6-5:7): ,
litId(6:3-6:7): chld
opComma(6:7-6:8): ,
litId(7:3-7:7): cont
opComma(7:7-7:8): ,
litId(8:3-8:6): fpe
opComma(8:6-8:7): ,
litId(9:3-9:6): hup
opComma(9:6-9:7): ,
litId(10:3-10:6): ill
opComma(10:6-10:7): ,
litId(11:3-11:6): int
opComma(11:6-11:7): ,
litId(12:3-12:5): io
opComma(12:5-12:6): ,
litId(13:3-13:7): kill
opComma(13:7-13:8): ,
litId(14:3-14:7): lost
opComma(14:7-14:8): ,
litId(15:3-15:7): pipe
opComma(15:7-15:8): ,
litId(16:3-16:7): prof
opComma(16:7-16:8): ,
litId(17:3-17:6): pwr
opComma(17:6-17:7): ,
litId(18:3-18:7): quit
opComma(18:7-18:8): ,
litId(19:3-19:7): segv
opComma(19:7-19:8): ,
litId(20:3-20:9): stkflt
opComma(20:9-20:10): ,
litId(21:3-21:7): stop
opComma(21:7-21:8): ,
litId(22:3-22:6): sys
opComma(22:6-22:7): ,
litId(23:3-23:7): term
opComma(23:7-23:8): ,
litId(24:3-24:7): trap
opComma(24:7-24:8): ,
litId(25:3-25:7): tstp
opComma(25:7-25:8): ,
litId(26:3-26:7): ttin
opComma(26:7-26:8): ,
litId(27:3-27:7): ttou
opComma(27:7-27:8): ,
litId(28:3-28:6): urg
opComma(28:6-28:7): ,
litId(29:3-29:7): usr1
opComma(29:7-29:8): ,
litId(30:3-30:7): usr2
opComma(30:7-30:8): ,
litId(31:3-31:9): vtalrm
opComma(31:9-31:10): ,
litId(32:3-32:8): winch
opComma(32:8-32:9): ,
litId(33:3-33:7): xcpu
opComma(33:7-33:8): ,
litId(34:3-34:7): xfsz
opRBrace(35:1-35:2): }
kwInterface(37:1-37:10): interface
litId(37:11-37:14): Any
opLBrace(37:15-37:16): {
kwOp(38:3-38:5): op
litId(38:6-38:9): str
opLPar(38:10-38:11): (
opRPar(38:11-38:12): )
litId(38:13-38:16): str
opRBrace(39:1-39:2): }
kwInterface(41:1-41:10): interface
litId(41:11-41:16): Array
opLt(41:16-41:17): <
litId(41:17-41:18): T
opGt(41:18-41:19): >
opColon(41:20-41:21): :
litId(41:22-41:25): Any
opLBrace(41:26-41:27): {
litId(42:3-42:8): empty
opColon(42:8-42:9): :
litId(42:10-42:14): bool
litId(43:3-43:6): len
opColon(43:6-43:7): :
litId(43:8-43:11): int
kwOp(45:3-45:5): op
opPlus(45:6-45:7): +
opLPar(45:8-45:9): (
litId(45:9-45:12): rhs
opColon(45:12-45:13): :
litId(45:14-45:15): T
opRPar(45:15-45:16): )
litId(45:17-45:22): Array
opLt(45:22-45:23): <
litId(45:23-45:24): T
opGt(45:24-45:25): >
kwOp(46:3-46:5): op
opPlus(46:6-46:7): +
opLPar(46:8-46:9): (
litId(46:9-46:12): rhs
opColon(46:12-46:13): :
litId(46:14-46:19): Array
opLt(46:19-46:20): <
litId(46:20-46:21): T
opGt(46:21-46:22): >
opRPar(46:22-46:23): )
litId(46:24-46:29): Array
opLt(46:29-46:30): <
litId(46:30-46:31): T
opGt(46:31-46:32): >
kwMut(47:3-47:6): mut
kwOp(47:7-47:9): op
opPlusEq(47:10-47:12): +=
opLPar(47:13-47:14): (
litId(47:14-47:17): rhs
opColon(47:17-47:18): :
litId(47:19-47:20): T
opRPar(47:20-47:21): )
kwThis(47:22-47:26): this
kwMut(48:3-48:6): mut
kwOp(48:7-48:9): op
opPlusEq(48:10-48:12): +=
opLPar(48:13-48:14): (
litId(48:14-48:17): rhs
opColon(48:17-48:18): :
litId(48:19-48:24): Array
opLt(48:24-48:25): <
litId(48:25-48:26): T
opGt(48:26-48:27): >
opRPar(48:27-48:28): )
kwThis(48:29-48:33): this
kwOp(49:3-49:5): op
opLBrack(49:6-49:7): [
opRBrack(49:7-49:8): ]
opLPar(49:9-49:10): (
litId(49:10-49:11): i
opColon(49:11-49:12): :
litId(49:13-49:16): int
opRPar(49:16-49:17): )
litId(49:18-49:19): T
kwMut(50:3-50:6): mut
kwOp(50:7-50:9): op
opLBrack(50:10-50:11): [
opRBrack(50:11-50:12): ]
opLPar(50:13-50:14): (
litId(50:14-50:15): i
opColon(50:15-50:16): :
litId(50:17-50:20): int
opRPar(50:20-50:21): )
kwMut(50:22-50:25): mut
litId(50:26-50:27): T
kwOp(51:3-51:5): op
opLBrack(51:6-51:7): [
opRBrack(51:7-51:8): ]
opLPar(51:9-51:10): (
litId(51:10-51:15): slice
opColon(51:15-51:16): :
litId(51:17-51:22): Slice
opRPar(51:22-51:23): )
litId(51:24-51:29): Array
opLt(51:29-51:30): <
litId(51:30-51:31): T
opGt(51:31-51:32): >
kwOp(52:3-52:5): op
litId(52:6-52:10): iter
opLPar(52:11-52:12): (
opRPar(52:12-52:13): )
litId(52:14-52:22): Iterator
opLt(52:22-52:23): <
litId(52:23-52:26): int
opComma(52:26-52:27): ,
litId(52:28-52:29): T
opGt(52:29-52:30): >
kwMut(53:3-53:6): mut
kwOp(53:7-53:9): op
litId(53:10-53:14): iter
opLPar(53:15-53:16): (
opRPar(53:16-53:17): )
litId(53:18-53:26): Iterator
opLt(53:26-53:27): <
litId(53:27-53:30): int
opComma(53:30-53:31): ,
kwMut(53:32-53:35): mut
litId(53:36-53:37): T
opGt(53:37-53:38): >
litId(55:3-55:11): includes
opLPar(55:12-55:13): (
litId(55:13-55:14): x
opColon(55:14-55:15): :
litId(55:16-55:17): T
opRPar(55:17-55:18): )
litId(55:19-55:23): bool
litId(56:3-56:8): index
opLPar(56:9-56:10): (
litId(56:10-56:11): x
opColon(56:11-56:12): :
litId(56:13-56:14): T
opRPar(56:14-56:15): )
litId(56:16-56:19): int
opQn(56:19-56:20): ?
kwMut(57:3-57:6): mut
litId(57:7-57:10): pop
opLPar(57:11-57:12): (
opRPar(57:12-57:13): )
litId(57:14-57:15): T
opQn(57:15-57:16): ?
kwMut(58:3-58:6): mut
litId(58:7-58:11): push
opLPar(58:12-58:13): (
litId(58:13-58:14): n
opColon(58:14-58:15): :
litId(58:16-58:17): T
opRPar(58:17-58:18): )
kwThis(58:19-58:23): this
kwMut(59:3-59:6): mut
litId(59:7-59:13): remove
opLPar(59:14-59:15): (
litId(59:15-59:17): at
opColon(59:17-59:18): :
litId(59:19-59:22): int
opRPar(59:22-59:23): )
litId(59:24-59:25): T
kwMut(60:3-60:6): mut
litId(60:7-60:14): reverse
opLPar(60:15-60:16): (
opRPar(60:16-60:17): )
kwThis(60:18-60:22): this
kwMut(61:3-61:6): mut
litId(61:7-61:12): shift
opLPar(61:13-61:14): (
opRPar(61:14-61:15): )
litId(61:16-61:17): T
opQn(61:17-61:18): ?
kwMut(62:3-62:6): mut
litId(62:7-62:14): unshift
opLPar(62:15-62:16): (
litId(62:16-62:17): n
opColon(62:17-62:18): :
litId(62:19-62:20): T
opRPar(62:20-62:21): )
kwThis(62:22-62:26): this
opRBrace(63:1-63:2): }
kwInterface(65:1-65:10): interface
litId(65:11-65:18): Boolean
opColon(65:19-65:20): :
litId(65:21-65:24): Any
opLBrace(65:25-65:26): {
opRBrace(66:1-66:2): }
kwInterface(68:1-68:10): interface
litId(68:11-68:15): Byte
opColon(68:16-68:17): :
litId(68:18-68:21): Any
opLBrace(68:22-68:23): {
kwOp(69:3-69:5): op
opPlus(69:6-69:7): +
opLPar(69:8-69:9): (
litId(69:9-69:12): rhs
opColon(69:12-69:13): :
litId(69:14-69:18): byte
opRPar(69:18-69:19): )
litId(69:20-69:24): byte
opRBrace(70:1-70:2): }
kwInterface(72:1-72:10): interface
litId(72:11-72:15): Char
opColon(72:16-72:17): :
litId(72:18-72:21): Any
opLBrace(72:22-72:23): {
litId(73:3-73:8): digit
opColon(73:8-73:9): :
litId(73:10-73:14): bool
kwOp(75:3-75:5): op
opPlus(75:6-75:7): +
opLPar(75:8-75:9): (
litId(75:9-75:12): rhs
opColon(75:12-75:13): :
litId(75:14-75:18): char
opRPar(75:18-75:19): )
litId(75:20-75:23): str
kwOp(76:3-76:5): op
opPlus(76:6-76:7): +
opLPar(76:8-76:9): (
litId(76:9-76:12): rhs
opColon(76:12-76:13): :
litId(76:14-76:17): str
opRPar(76:17-76:18): )
litId(76:19-76:22): str
litId(78:3-78:8): times
opLPar(78:9-78:10): (
litId(78:10-78:11): n
opColon(78:11-78:12): :
litId(78:13-78:16): int
opRPar(78:16-78:17): )
litId(78:18-78:21): str
opRBrace(79:1-79:2): }
kwInterface(81:1-81:10): interface
litId(81:11-81:19): Function
opColon(81:20-81:21): :
litId(81:22-81:25): Any
opLBrace(81:26-81:27): {
opRBrace(82:1-82:2): }
kwInterface(84:1-84:10): interface
litId(84:11-84:17): Number
opColon(84:18-84:19): :
litId(84:20-84:23): Any
opLBrace(84:24-84:25): {
kwOp(85:3-85:5): op
opPlus(85:6-85:7): +
opLPar(85:8-85:9): (
litId(85:9-85:12): rhs
opColon(85:12-85:13): :
litId(85:14-85:20): Number
opRPar(85:20-85:21): )
litId(85:22-85:28): Number
kwOp(86:3-86:5): op
opPlus(86:6-86:7): +
opLPar(86:8-86:9): (
litId(86:9-86:12): rhs
opColon(86:12-86:13): :
litId(86:14-86:18): char
opRPar(86:18-86:19): )
litId(86:20-86:23): str
kwOp(87:3-87:5): op
opPlus(87:6-87:7): +
opLPar(87:8-87:9): (
litId(87:9-87:12): rhs
opColon(87:12-87:13): :
litId(87:14-87:17): str
opRPar(87:17-87:18): )
litId(87:19-87:22): str
kwOp(88:3-88:5): op
opMinus(88:6-88:7): -
opLPar(88:8-88:9): (
litId(88:9-88:12): rhs
opColon(88:12-88:13): :
litId(88:14-88:20): Number
opRPar(88:20-88:21): )
litId(88:22-88:28): Number
kwOp(89:3-89:5): op
opSlash(89:6-89:7): /
opLPar(89:8-89:9): (
litId(89:9-89:12): rhs
opColon(89:12-89:13): :
litId(89:14-89:20): Number
opRPar(89:20-89:21): )
litId(89:22-89:28): Number
kwOp(90:3-90:5): op
opStar(90:6-90:7): *
opLPar(90:8-90:9): (
litId(90:9-90:12): rhs
opColon(90:12-90:13): :
litId(90:14-90:20): Number
opRPar(90:20-90:21): )
litId(90:22-90:28): Number
kwOp(91:3-91:5): op
opPercent(91:6-91:7): %
opLPar(91:8-91:9): (
litId(91:9-91:12): rhs
opColon(91:12-91:13): :
litId(91:14-91:20): Number
opRPar(91:20-91:21): )
litId(91:22-91:28): Number
kwMut(92:3-92:6): mut
kwOp(92:7-92:9): op
opPlusEq(92:10-92:12): +=
opLPar(92:13-92:14): (
litId(92:14-92:17): rhs
opColon(92:17-92:18): :
litId(92:19-92:25): Number
opRPar(92:25-92:26): )
kwThis(92:27-92:31): this
kwMut(93:3-93:6): mut
kwOp(93:7-93:9): op
opMinusEq(93:10-93:12): -=
opLPar(93:13-93:14): (
litId(93:14-93:17): rhs
opColon(93:17-93:18): :
litId(93:19-93:25): Number
opRPar(93:25-93:26): )
kwThis(93:27-93:31): this
kwMut(94:3-94:6): mut
kwOp(94:7-94:9): op
opSlashEq(94:10-94:12): /=
opLPar(94:13-94:14): (
litId(94:14-94:17): rhs
opColon(94:17-94:18): :
litId(94:19-94:25): Number
opRPar(94:25-94:26): )
kwThis(94:27-94:31): this
kwMut(95:3-95:6): mut
kwOp(95:7-95:9): op
opStarEq(95:10-95:12): *=
opLPar(95:13-95:14): (
litId(95:14-95:17): rhs
opColon(95:17-95:18): :
litId(95:19-95:25): Number
opRPar(95:25-95:26): )
kwThis(95:27-95:31): this
kwMut(96:3-96:6): mut
kwOp(96:7-96:9): op
opPercentEq(96:10-96:12): %=
opLPar(96:13-96:14): (
litId(96:14-96:17): rhs
opColon(96:17-96:18): :
litId(96:19-96:25): Number
opRPar(96:25-96:26): )
kwThis(96:27-96:31): this
opRBrace(97:1-97:2): }
kwInterface(99:1-99:10): interface
litId(99:11-99:17): Object
opColon(99:18-99:19): :
litId(99:20-99:23): Any
opLBrace(99:24-99:25): {
opRBrace(100:1-100:2): }
kwInterface(102:1-102:10): interface
litId(102:11-102:19): Optional
opLt(102:19-102:20): <
litId(102:20-102:21): T
opGt(102:21-102:22): >
opColon(102:23-102:24): :
litId(102:25-102:28): Any
opLBrace(102:29-102:30): {
opRBrace(103:1-103:2): }
kwInterface(105:1-105:10): interface
litId(105:11-105:16): Range
opColon(105:17-105:18): :
litId(105:19-105:22): Any
opLBrace(105:23-105:24): {
litId(106:3-106:6): end
opColon(106:6-106:7): :
litId(106:8-106:11): int
litId(107:3-107:8): start
opColon(107:8-107:9): :
litId(107:10-107:13): int
kwOp(109:3-109:5): op
litId(109:6-109:10): iter
opLPar(109:11-109:12): (
opRPar(109:12-109:13): )
litId(109:14-109:22): Iterator
opLt(109:22-109:23): <
litId(109:23-109:26): int
opComma(109:26-109:27): ,
litId(109:28-109:31): int
opGt(109:31-109:32): >
kwMut(110:3-110:6): mut
kwOp(110:7-110:9): op
litId(110:10-110:14): iter
opLPar(110:15-110:16): (
opRPar(110:16-110:17): )
litId(110:18-110:26): Iterator
opLt(110:26-110:27): <
litId(110:27-110:30): int
opComma(110:30-110:31): ,
kwMut(110:32-110:35): mut
litId(110:36-110:39): int
opGt(110:39-110:40): >
opRBrace(111:1-111:2): }
kwInterface(113:1-113:10): interface
litId(113:11-113:16): Slice
opColon(113:17-113:18): :
litId(113:19-113:22): Any
opLBrace(113:23-113:24): {
litId(114:3-114:6): end
opColon(114:6-114:7): :
litId(114:8-114:11): int
opQn(114:11-114:12): ?
litId(115:3-115:8): start
opColon(115:8-115:9): :
litId(115:10-115:13): int
opQn(115:13-115:14): ?
litId(116:3-116:7): step
opColon(116:7-116:8): :
litId(116:9-116:12): int
opQn(116:12-116:13): ?
opRBrace(117:1-117:2): }
kwInterface(119:1-119:10): interface
litId(119:11-119:17): String
opColon(119:18-119:19): :
litId(119:20-119:23): Any
opLBrace(119:24-119:25): {
litId(120:3-120:8): empty
opColon(120:8-120:9): :
litId(120:10-120:14): bool
litId(121:3-121:6): len
opColon(121:6-121:7): :
litId(121:8-121:11): int
kwOp(123:3-123:5): op
opPlus(123:6-123:7): +
opLPar(123:8-123:9): (
litId(123:9-123:12): rhs
opColon(123:12-123:13): :
litId(123:14-123:18): char
opRPar(123:18-123:19): )
litId(123:20-123:23): str
kwOp(124:3-124:5): op
opPlus(124:6-124:7): +
opLPar(124:8-124:9): (
litId(124:9-124:12): rhs
opColon(124:12-124:13): :
litId(124:14-124:17): str
opRPar(124:17-124:18): )
litId(124:19-124:22): str
kwMut(125:3-125:6): mut
kwOp(125:7-125:9): op
opPlusEq(125:10-125:12): +=
opLPar(125:13-125:14): (
litId(125:14-125:17): rhs
opColon(125:17-125:18): :
litId(125:19-125:23): char
opRPar(125:23-125:24): )
kwThis(125:25-125:29): this
kwMut(126:3-126:6): mut
kwOp(126:7-126:9): op
opPlusEq(126:10-126:12): +=
opLPar(126:13-126:14): (
litId(126:14-126:17): rhs
opColon(126:17-126:18): :
litId(126:19-126:22): str
opRPar(126:22-126:23): )
kwThis(126:24-126:28): this
kwOp(127:3-127:5): op
opLBrack(127:6-127:7): [
opRBrack(127:7-127:8): ]
opLPar(127:9-127:10): (
litId(127:10-127:11): i
opColon(127:11-127:12): :
litId(127:13-127:16): int
opRPar(127:16-127:17): )
litId(127:18-127:22): char
kwMut(128:3-128:6): mut
kwOp(128:7-128:9): op
opLBrack(128:10-128:11): [
opRBrack(128:11-128:12): ]
opLPar(128:13-128:14): (
litId(128:14-128:15): i
opColon(128:15-128:16): :
litId(128:17-128:20): int
opRPar(128:20-128:21): )
kwMut(128:22-128:25): mut
litId(128:26-128:30): char
kwOp(129:3-129:5): op
opLBrack(129:6-129:7): [
opRBrack(129:7-129:8): ]
opLPar(129:9-129:10): (
litId(129:10-129:15): slice
opColon(129:15-129:16): :
litId(129:17-129:22): Slice
opRPar(129:22-129:23): )
litId(129:24-129:27): str
kwOp(130:3-130:5): op
litId(130:6-130:10): iter
opLPar(130:11-130:12): (
opRPar(130:12-130:13): )
litId(130:14-130:22): Iterator
opLt(130:22-130:23): <
litId(130:23-130:26): int
opComma(130:26-130:27): ,
litId(130:28-130:32): char
opGt(130:32-130:33): >
kwMut(131:3-131:6): mut
kwOp(131:7-131:9): op
litId(131:10-131:14): iter
opLPar(131:15-131:16): (
opRPar(131:16-131:17): )
litId(131:18-131:26): Iterator
opLt(131:26-131:27): <
litId(131:27-131:30): int
opComma(131:30-131:31): ,
kwMut(131:32-131:35): mut
litId(131:36-131:40): char
opGt(131:40-131:41): >
kwMut(133:3-133:6): mut
litId(133:7-133:12): clear
opLPar(133:13-133:14): (
opRPar(133:14-133:15): )
kwThis(133:16-133:20): this
litId(134:3-134:11): includes
opLPar(134:12-134:13): (
litId(134:13-134:14): x
opColon(134:14-134:15): :
litId(134:16-134:20): char
opRPar(134:20-134:21): )
litId(134:22-134:26): bool
litId(135:3-135:11): includes
opLPar(135:12-135:13): (
litId(135:13-135:14): x
opColon(135:14-135:15): :
litId(135:16-135:19): str
opRPar(135:19-135:20): )
litId(135:21-135:25): bool
litId(136:3-136:8): index
opLPar(136:9-136:10): (
litId(136:10-136:11): x
opColon(136:11-136:12): :
litId(136:13-136:17): char
opRPar(136:17-136:18): )
litId(136:19-136:22): int
opQn(136:22-136:23): ?
litId(137:3-137:8): index
opLPar(137:9-137:10): (
litId(137:10-137:11): x
opColon(137:11-137:12): :
litId(137:13-137:16): str
opRPar(137:16-137:17): )
litId(137:18-137:21): int
opQn(137:21-137:22): ?
kwMut(138:3-138:6): mut
litId(138:7-138:14): reverse
opLPar(138:15-138:16): (
opRPar(138:16-138:17): )
kwThis(138:18-138:22): this
litId(139:3-139:8): times
opLPar(139:9-139:10): (
litId(139:10-139:11): n
opColon(139:11-139:12): :
litId(139:13-139:16): int
opRPar(139:16-139:17): )
litId(139:18-139:21): str
opRBrace(140:1-140:2): }
kwObj(142:1-142:4): obj
litId(142:5-142:12): Program
opLBrace(142:13-142:14): {
litId(143:3-143:7): args
opColon(143:7-143:8): :
litId(143:9-143:12): str
opLBrack(143:12-143:13): [
opRBrack(143:13-143:14): ]
litId(144:3-144:6): cwd
opColon(144:6-144:7): :
litId(144:8-144:11): str
litId(145:3-145:6): env
opColon(145:6-145:7): :
litId(145:8-145:11): Map
opLt(145:11-145:12): <
litId(145:12-145:15): str
opComma(145:15-145:16): ,
litId(145:17-145:20): str
opGt(145:20-145:21): >
litId(146:3-146:6): pid
opColon(146:6-146:7): :
litId(146:8-146:11): int
opRBrace(147:1-147:2): }
kwExport(149:1-149:7): export
kwClass(149:8-149:13): class
litId(149:14-149:19): Error
opLBrace(149:20-149:21): {
kwPub(150:3-150:6): pub
litId(150:7-150:14): message
opColon(150:14-150:15): :
litId(150:16-150:19): str
kwPub(151:3-151:6): pub
litId(151:7-151:11): name
opColon(151:11-151:12): :
litId(151:13-151:16): str
kwInit(153:3-153:7): init
opLPar(153:8-153:9): (
litId(153:9-153:16): message
opColon(153:16-153:17): :
litId(153:18-153:21): str
opRPar(153:21-153:22): )
kwThis(153:23-153:27): this
opRBrace(154:1-154:2): }
kwExport(156:1-156:7): export
kwClass(156:8-156:13): class
litId(156:14-156:22): Iterator
opLt(156:22-156:23): <
litId(156:23-156:24): T
opComma(156:24-156:25): ,
litId(156:26-156:27): U
opGt(156:27-156:28): >
opLBrace(156:29-156:30): {
kwPub(157:3-157:6): pub
litId(157:7-157:13): cursor
opColon(157:13-157:14): :
litId(157:15-157:16): T
kwPub(159:3-159:6): pub
kwFn(159:7-159:9): fn
litId(159:10-159:17): hasNext
opLPar(159:18-159:19): (
opRPar(159:19-159:20): )
litId(159:21-159:25): bool
kwPub(160:3-160:6): pub
kwFn(160:7-160:9): fn
litId(160:10-160:14): next
opLPar(160:15-160:16): (
opRPar(160:16-160:17): )
litId(160:18-160:19): U
kwPub(161:3-161:6): pub
kwMut(161:7-161:10): mut
kwFn(161:11-161:13): fn
litId(161:14-161:18): next
opLPar(161:19-161:20): (
opRPar(161:20-161:21): )
kwMut(161:22-161:25): mut
litId(161:26-161:27): U
opRBrace(162:1-162:2): }
kwExport(164:1-164:7): export
kwClass(164:8-164:13): class
litId(164:14-164:17): Map
opLt(164:17-164:18): <
litId(164:18-164:19): T
opComma(164:19-164:20): ,
litId(164:21-164:22): U
opGt(164:22-164:23): >
opLBrace(164:24-164:25): {
kwPub(165:3-165:6): pub
litId(165:7-165:11): size
opColon(165:11-165:12): :
litId(165:13-165:16): int
kwOp(167:3-167:5): op
litId(167:6-167:10): iter
opLPar(167:11-167:12): (
opRPar(167:12-167:13): )
litId(167:14-167:22): Iterator
opLt(167:22-167:23): <
litId(167:23-167:24): T
opComma(167:24-167:25): ,
litId(167:26-167:27): U
opGt(167:27-167:28): >
kwMut(168:3-168:6): mut
kwOp(168:7-168:9): op
litId(168:10-168:14): iter
opLPar(168:15-168:16): (
opRPar(168:16-168:17): )
litId(168:18-168:26): Iterator
opLt(168:26-168:27): <
litId(168:27-168:28): T
opComma(168:28-168:29): ,
kwMut(168:30-168:33): mut
litId(168:34-168:35): U
opGt(168:35-168:36): >
kwOp(169:3-169:5): op
litId(169:6-169:9): str
opLPar(169:10-169:11): (
opRPar(169:11-169:12): )
litId(169:13-169:16): str
kwPub(171:3-171:6): pub
kwMut(171:7-171:10): mut
kwFn(171:11-171:13): fn
litId(171:14-171:20): delete
opLPar(171:21-171:22): (
litId(171:22-171:25): key
opColon(171:25-171:26): :
litId(171:27-171:28): T
opRPar(171:28-171:29): )
kwThis(171:30-171:34): this
kwPub(172:3-172:6): pub
kwFn(172:7-172:9): fn
litId(172:10-172:13): get
opLPar(172:14-172:15): (
litId(172:15-172:18): key
opColon(172:18-172:19): :
litId(172:20-172:21): T
opRPar(172:21-172:22): )
litId(172:23-172:24): U
opQn(172:24-172:25): ?
kwPub(173:3-173:6): pub
kwMut(173:7-173:10): mut
kwFn(173:11-173:13): fn
litId(173:14-173:17): get
opLPar(173:18-173:19): (
litId(173:19-173:22): key
opColon(173:22-173:23): :
litId(173:24-173:25): T
opRPar(173:25-173:26): )
kwMut(173:27-173:30): mut
litId(173:31-173:32): U
opQn(173:32-173:33): ?
kwPub(174:3-174:6): pub
kwFn(174:7-174:9): fn
litId(174:10-174:13): has
opLPar(174:14-174:15): (
litId(174:15-174:18): key
opColon(174:18-174:19): :
litId(174:20-174:21): T
opRPar(174:21-174:22): )
litId(174:23-174:27): bool
kwPub(175:3-175:6): pub
kwMut(175:7-175:10): mut
kwFn(175:11-175:13): fn
litId(175:14-175:17): set
opLPar(175:18-175:19): (
litId(175:19-175:22): key
opColon(175:22-175:23): :
litId(175:24-175:25): T
opComma(175:25-175:26): ,
litId(175:27-175:30): val
opColon(175:30-175:31): :
litId(175:32-175:33): U
opRPar(175:33-175:34): )
kwThis(175:35-175:39): this
opRBrace(176:1-176:2): }
kwExport(178:1-178:7): export
kwFn(178:8-178:10): fn
litId(178:11-178:15): exit
opLPar(178:16-178:17): (
litId(178:17-178:21): code
opColon(178:21-178:22): :
litId(178:23-178:26): int
opRPar(178:26-178:27): )
litId(178:28-178:32): void
kwExport(179:1-179:7): export
kwFn(179:8-179:10): fn
litId(179:11-179:15): kill
opLPar(179:16-179:17): (
litId(179:17-179:20): pid
opColon(179:20-179:21): :
litId(179:22-179:25): int
opComma(179:25-179:26): ,
litId(179:27-179:30): sig
opColonEq(179:31-179:33): :=
litId(179:34-179:40): Signal
opDot(179:40-179:41): .
litId(179:41-179:45): term
opRPar(179:45-179:46): )
litId(179:47-179:51): void
kwExport(180:1-180:7): export
kwFn(180:8-180:10): fn
litId(180:11-180:16): print
opLPar(180:17-180:18): (
litId(180:18-180:23): items
opColon(180:23-180:24): :
litId(180:25-180:28): any
opDotDotDot(180:28-180:31): ...
opComma(180:31-180:32): ,
litId(180:33-180:42): separator
opColonEq(180:43-180:45): :=
litStr(180:46-180:49): " "
opComma(180:49-180:50): ,
litId(180:51-180:61): terminator
opColonEq(180:62-180:64): :=
litStr(180:65-180:69): "\\n"
opRPar(180:69-180:70): )
litId(180:71-180:75): void
kwExport(181:1-181:7): export
kwAsync(181:8-181:13): async
kwFn(181:14-181:16): fn
litId(181:17-181:22): sleep
opLPar(181:23-181:24): (
litId(181:24-181:26): ms
opColon(181:26-181:27): :
litId(181:28-181:31): int
opRPar(181:31-181:32): )
litId(181:33-181:37): void
kwExport(183:1-183:7): export
litId(183:8-183:15): program
opColon(183:15-183:16): :
litId(183:17-183:24): Program
