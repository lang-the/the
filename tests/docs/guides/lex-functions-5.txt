kwFn(1:1-1:3): fn
litId(1:4-1:10): myFunc
opLPar(1:11-1:12): (
litId(1:12-1:13): a
opColon(1:13-1:14): :
litId(1:15-1:18): int
opComma(1:18-1:19): ,
litId(1:20-1:21): b
opColon(1:21-1:22): :
litId(1:23-1:26): int
opComma(1:26-1:27): ,
litId(1:28-1:29): c
opColon(1:29-1:30): :
litId(1:31-1:34): str
opComma(1:34-1:35): ,
litId(1:36-1:37): d
opColon(1:37-1:38): :
litId(1:39-1:42): str
opRPar(1:42-1:43): )
litId(1:44-1:47): int
opComma(1:47-1:48): ,
litId(1:49-1:52): str
opLBrace(1:53-1:54): {
kwReturn(2:3-2:9): return
litId(2:10-2:11): a
opPlus(2:12-2:13): +
litId(2:14-2:15): b
opComma(2:15-2:16): ,
litId(2:17-2:18): c
opPlus(2:19-2:20): +
litId(2:21-2:22): d
opRBrace(3:1-3:2): }
kwMain(5:1-5:5): main
opLBrace(5:6-5:7): {
litId(6:3-6:4): e
opComma(6:4-6:5): ,
litId(6:6-6:7): f
opColonEq(6:8-6:10): :=
litId(6:11-6:17): myFunc
opLPar(6:17-6:18): (
litIntDec(6:18-6:19): 1
opComma(6:19-6:20): ,
litIntDec(6:21-6:22): 2
opComma(6:22-6:23): ,
litStr(6:24-6:33): "Hello, "
opComma(6:33-6:34): ,
litStr(6:35-6:43): "World!"
opRPar(6:43-6:44): )
opRBrace(7:1-7:2): }
