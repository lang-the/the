kwObj(1:1-1:4): obj
litId(1:5-1:12): Example
opLBrace(1:13-1:14): {
litId(2:3-2:4): a
opColon(2:4-2:5): :
litId(2:6-2:9): int
litId(3:3-3:4): b
opColon(3:4-3:5): :
litId(3:6-3:9): str
opRBrace(4:1-4:2): }
kwMain(6:1-6:5): main
opLBrace(6:6-6:7): {
litId(7:3-7:4): e
opColonEq(7:5-7:7): :=
litId(7:8-7:15): Example
opLBrace(7:15-7:16): {
opRBrace(7:16-7:17): }
kwLoop(9:3-9:7): loop
litId(9:8-9:11): key
kwIn(9:12-9:14): in
litId(9:15-9:16): e
opLBrace(9:17-9:18): {
litId(10:5-10:10): print
opLPar(10:10-10:11): (
litStr(10:11-10:17): "Key:"
opComma(10:17-10:18): ,
litId(10:19-10:22): key
opRPar(10:22-10:23): )
opRBrace(11:3-11:4): }
kwLoop(13:3-13:7): loop
litId(13:8-13:11): key
opComma(13:11-13:12): ,
litId(13:13-13:16): val
kwIn(13:17-13:19): in
litId(13:20-13:21): e
opLBrace(13:22-13:23): {
litId(14:5-14:10): print
opLPar(14:10-14:11): (
litStr(14:11-14:17): "Key:"
opComma(14:17-14:18): ,
litId(14:19-14:22): key
opComma(14:22-14:23): ,
litStr(14:24-14:32): "Value:"
opComma(14:32-14:33): ,
litId(14:34-14:37): val
opRPar(14:37-14:38): )
opRBrace(15:3-15:4): }
kwLoop(17:3-17:7): loop
litId(17:8-17:9): _
opComma(17:9-17:10): ,
litId(17:11-17:14): val
kwIn(17:15-17:17): in
litId(17:18-17:19): e
opLBrace(17:20-17:21): {
litId(18:5-18:10): print
opLPar(18:10-18:11): (
litStr(18:11-18:19): "Value:"
opComma(18:19-18:20): ,
litId(18:21-18:24): val
opRPar(18:24-18:25): )
opRBrace(19:3-19:4): }
opRBrace(20:1-20:2): }
