kwFn(1:1-1:3): fn
litId(1:4-1:7): add
opLPar(1:8-1:9): (
litId(1:9-1:10): a
opColon(1:10-1:11): :
litId(1:12-1:15): int
opComma(1:15-1:16): ,
litId(1:17-1:18): b
opColon(1:18-1:19): :
litId(1:20-1:23): int
opComma(1:23-1:24): ,
litId(1:25-1:27): cb
opColon(1:27-1:28): :
kwFn(1:29-1:31): fn
opLPar(1:32-1:33): (
litId(1:33-1:36): int
opRPar(1:36-1:37): )
litId(1:38-1:42): void
opRPar(1:42-1:43): )
opLBrace(1:44-1:45): {
litId(2:3-2:5): cb
opLPar(2:5-2:6): (
litId(2:6-2:7): a
opPlus(2:8-2:9): +
litId(2:10-2:11): b
opRPar(2:11-2:12): )
opRBrace(3:1-3:2): }
kwMain(5:1-5:5): main
opLBrace(5:6-5:7): {
litId(6:3-6:6): arr
opColonEq(6:7-6:9): :=
opLBrack(6:10-6:11): [
litIntDec(6:11-6:12): 1
opComma(6:12-6:13): ,
litIntDec(6:14-6:15): 2
opComma(6:15-6:16): ,
litIntDec(6:17-6:18): 3
opRBrack(6:18-6:19): ]
litId(8:3-8:6): arr
opDot(8:6-8:7): .
litId(8:7-8:13): filter
opLPar(8:13-8:14): (
kwFn(8:14-8:16): fn
opLPar(8:17-8:18): (
litId(8:18-8:20): it
opColon(8:20-8:21): :
litId(8:22-8:25): int
opRPar(8:25-8:26): )
litId(8:27-8:31): bool
opLBrace(8:32-8:33): {
kwReturn(9:5-9:11): return
litId(9:12-9:14): it
opGtEq(9:15-9:17): >=
litIntDec(9:18-9:19): 2
opRBrace(10:3-10:4): }
opRPar(10:4-10:5): )
litId(12:3-12:6): add
opLPar(12:6-12:7): (
litId(12:7-12:10): arr
opLBrack(12:10-12:11): [
litIntDec(12:11-12:12): 0
opRBrack(12:12-12:13): ]
opComma(12:13-12:14): ,
litId(12:15-12:18): arr
opLBrack(12:18-12:19): [
litIntDec(12:19-12:20): 1
opRBrack(12:20-12:21): ]
opComma(12:21-12:22): ,
kwFn(12:23-12:25): fn
opLPar(12:26-12:27): (
litId(12:27-12:28): c
opColon(12:28-12:29): :
litId(12:30-12:33): int
opRPar(12:33-12:34): )
opLBrace(12:35-12:36): {
litId(13:5-13:10): print
opLPar(13:10-13:11): (
litStr(13:11-13:40): "Result of arr[0] + arr[1] ="
opComma(13:40-13:41): ,
litId(13:42-13:43): c
opRPar(13:43-13:44): )
opRBrace(14:3-14:4): }
opRPar(14:4-14:5): )
opRBrace(15:1-15:2): }
