KW_FN: fn
LIT_ID: add
OP_LPAR: (
LIT_ID: a
OP_COLON: :
LIT_ID: int
OP_COMMA: ,
LIT_ID: b
OP_COLON: :
LIT_ID: int
OP_COMMA: ,
LIT_ID: cb
OP_COLON: :
KW_FN: fn
OP_LPAR: (
LIT_ID: int
OP_RPAR: )
LIT_ID: void
OP_RPAR: )
OP_LBRACE: {
LIT_ID: cb
OP_LPAR: (
LIT_ID: a
OP_PLUS: +
LIT_ID: b
OP_RPAR: )
OP_RBRACE: }
KW_MAIN: main
OP_LBRACE: {
LIT_ID: arr
OP_COLONEQ: :=
OP_LBRACK: [
LIT_INT_DEC: 1
OP_COMMA: ,
LIT_INT_DEC: 2
OP_COMMA: ,
LIT_INT_DEC: 3
OP_RBRACK: ]
LIT_ID: arr
OP_DOT: .
LIT_ID: filter
OP_LPAR: (
KW_FN: fn
OP_LPAR: (
LIT_ID: it
OP_COLON: :
LIT_ID: int
OP_RPAR: )
LIT_ID: bool
OP_LBRACE: {
KW_RETURN: return
LIT_ID: it
OP_GTEQ: >=
LIT_INT_DEC: 2
OP_RBRACE: }
OP_RPAR: )
LIT_ID: add
OP_LPAR: (
LIT_ID: arr
OP_LBRACK: [
LIT_INT_DEC: 0
OP_RBRACK: ]
OP_COMMA: ,
LIT_ID: arr
OP_LBRACK: [
LIT_INT_DEC: 1
OP_RBRACK: ]
OP_COMMA: ,
KW_FN: fn
OP_LPAR: (
LIT_ID: c
OP_COLON: :
LIT_ID: int
OP_RPAR: )
OP_LBRACE: {
LIT_ID: print
OP_LPAR: (
LIT_STR: "Result of arr[0] + arr[1] ="
OP_COMMA: ,
LIT_ID: c
OP_RPAR: )
OP_RBRACE: }
OP_RPAR: )
OP_RBRACE: }
