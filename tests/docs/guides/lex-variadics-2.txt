kwClass(1:1-1:6): class
litId(1:7-1:12): MySum
opLBrace(1:13-1:14): {
kwPriv(2:3-2:7): priv
litId(2:8-2:15): _result
opColonEq(2:16-2:18): :=
litIntDec(2:19-2:20): 0
kwInit(4:3-4:7): init
opLPar(4:8-4:9): (
litId(4:9-4:13): nums
opColon(4:13-4:14): :
litId(4:15-4:18): int
opDotDotDot(4:18-4:21): ...
opRPar(4:21-4:22): )
opLBrace(4:23-4:24): {
kwIf(5:5-5:7): if
litId(5:8-5:12): nums
opDot(5:12-5:13): .
litId(5:13-5:18): empty
opLBrace(5:19-5:20): {
kwReturn(6:7-6:13): return
opRBrace(7:5-7:6): }
kwElif(7:7-7:11): elif
litId(7:12-7:16): nums
opDot(7:16-7:17): .
litId(7:17-7:20): len
opEqEq(7:21-7:23): ==
litIntDec(7:24-7:25): 1
opLBrace(7:26-7:27): {
kwThis(8:7-8:11): this
opDot(8:11-8:12): .
litId(8:12-8:19): _result
opEq(8:20-8:21): =
litId(8:22-8:26): nums
opLBrack(8:26-8:27): [
litIntDec(8:27-8:28): 0
opRBrack(8:28-8:29): ]
kwReturn(9:7-9:13): return
opRBrace(10:5-10:6): }
kwLoop(12:5-12:9): loop
litId(12:10-12:13): num
kwIn(12:14-12:16): in
litId(12:17-12:21): nums
opLBrace(12:22-12:23): {
kwThis(13:7-13:11): this
opDot(13:11-13:12): .
litId(13:12-13:19): _result
opPlusEq(13:20-13:22): +=
litId(13:23-13:26): num
opRBrace(14:5-14:6): }
opRBrace(15:3-15:4): }
opRBrace(16:1-16:2): }
kwMain(18:1-18:5): main
opLBrace(18:6-18:7): {
kwNew(19:3-19:6): new
litId(19:7-19:14): MyClass
opLPar(19:14-19:15): (
opRPar(19:15-19:16): )
kwNew(20:3-20:6): new
litId(20:7-20:14): MyClass
opLPar(20:14-20:15): (
litIntDec(20:15-20:16): 1
opRPar(20:16-20:17): )
kwNew(21:3-21:6): new
litId(21:7-21:14): MyClass
opLPar(21:14-21:15): (
litIntDec(21:15-21:16): 2
opComma(21:16-21:17): ,
litIntDec(21:18-21:19): 3
opRPar(21:19-21:20): )
kwNew(22:3-22:6): new
litId(22:7-22:14): MyClass
opLPar(22:14-22:15): (
litIntDec(22:15-22:16): 4
opComma(22:16-22:17): ,
litIntDec(22:18-22:19): 5
opComma(22:19-22:20): ,
litIntDec(22:21-22:22): 6
opRPar(22:22-22:23): )
opRBrace(23:1-23:2): }
