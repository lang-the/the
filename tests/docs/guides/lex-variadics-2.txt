KW_CLASS: class
LIT_ID: MySum
OP_LBRACE: {
KW_PRIV: priv
LIT_ID: _result
OP_COLONEQ: :=
LIT_INT_DEC: 0
KW_INIT: init
OP_LPAR: (
LIT_ID: nums
OP_COLON: :
LIT_ID: int
OP_DOTDOTDOT: ...
OP_RPAR: )
OP_LBRACE: {
KW_IF: if
LIT_ID: nums
OP_DOT: .
LIT_ID: empty
OP_LBRACE: {
KW_RETURN: return
OP_RBRACE: }
KW_ELIF: elif
LIT_ID: nums
OP_DOT: .
LIT_ID: len
OP_EQEQ: ==
LIT_INT_DEC: 1
OP_LBRACE: {
KW_THIS: this
OP_DOT: .
LIT_ID: _result
OP_EQ: =
LIT_ID: nums
OP_LBRACK: [
LIT_INT_DEC: 0
OP_RBRACK: ]
KW_RETURN: return
OP_RBRACE: }
KW_LOOP: loop
LIT_ID: num
KW_IN: in
LIT_ID: nums
OP_LBRACE: {
KW_THIS: this
OP_DOT: .
LIT_ID: _result
OP_PLUSEQ: +=
LIT_ID: num
OP_RBRACE: }
OP_RBRACE: }
OP_RBRACE: }
KW_MAIN: main
OP_LBRACE: {
KW_NEW: new
LIT_ID: MyClass
OP_LPAR: (
OP_RPAR: )
KW_NEW: new
LIT_ID: MyClass
OP_LPAR: (
LIT_INT_DEC: 1
OP_RPAR: )
KW_NEW: new
LIT_ID: MyClass
OP_LPAR: (
LIT_INT_DEC: 2
OP_COMMA: ,
LIT_INT_DEC: 3
OP_RPAR: )
KW_NEW: new
LIT_ID: MyClass
OP_LPAR: (
LIT_INT_DEC: 4
OP_COMMA: ,
LIT_INT_DEC: 5
OP_COMMA: ,
LIT_INT_DEC: 6
OP_RPAR: )
OP_RBRACE: }
