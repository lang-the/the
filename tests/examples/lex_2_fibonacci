KW_FN: fn
LIT_ID: fibonacci
OP_LPAR: (
LIT_ID: max
OP_COLON: :
LIT_ID: int
OP_RPAR: )
LIT_ID: int
OP_LBRACK: [
OP_RBRACK: ]
OP_LBRACE: {
KW_MUT: mut
LIT_ID: result
OP_COLONEQ: :=
OP_LBRACK: [
LIT_INT_DEC: 0
OP_COMMA: ,
LIT_INT_DEC: 1
OP_RBRACK: ]
KW_LOOP: loop
LIT_ID: i
KW_IN: in
LIT_INT_DEC: 2
OP_DOTDOTEQ: ..=
OP_EQ: =
LIT_ID: max
OP_LBRACE: {
LIT_ID: result
OP_DOT: .
LIT_ID: push
OP_LPAR: (
LIT_ID: result
OP_LBRACK: [
LIT_ID: i
OP_MINUS: -
LIT_INT_DEC: 2
OP_RBRACK: ]
OP_PLUS: +
LIT_ID: result
OP_LBRACK: [
LIT_ID: i
OP_MINUS: -
LIT_INT_DEC: 1
OP_RBRACK: ]
OP_RPAR: )
OP_RBRACE: }
KW_RETURN: return
LIT_ID: result
OP_RBRACE: }
KW_MAIN: main
OP_LBRACE: {
LIT_ID: print
OP_LPAR: (
LIT_STR: "Fibonacci sequence:"
OP_COMMA: ,
LIT_ID: fibonacci
OP_LPAR: (
LIT_INT_DEC: 50
OP_RPAR: )
OP_RPAR: )
OP_RBRACE: }
