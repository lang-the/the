kwObj(1:1-1:4): obj
litId(1:5-1:9): Node
opLBrace(1:10-1:11): {
litId(2:3-2:7): left
opColon(2:7-2:8): :
litId(2:9-2:13): Tree
opQn(2:13-2:14): ?
litId(3:3-3:8): right
opColon(3:8-3:9): :
litId(3:10-3:14): Tree
opQn(3:14-3:15): ?
litId(4:3-4:6): val
opColon(4:6-4:7): :
litId(4:8-4:11): int
opRBrace(5:1-5:2): }
kwClass(7:1-7:6): class
litId(7:7-7:11): Tree
opLBrace(7:12-7:13): {
kwPriv(8:3-8:7): priv
kwMut(8:8-8:11): mut
litId(8:12-8:18): _nodes
opColon(8:18-8:19): :
litId(8:20-8:24): Node
opLBrack(8:24-8:25): [
opRBrack(8:25-8:26): ]
kwInit(10:3-10:7): init
opLPar(10:8-10:9): (
litId(10:9-10:14): nodes
opColon(10:14-10:15): :
litId(10:16-10:20): Node
opDotDotDot(10:20-10:23): ...
opRPar(10:23-10:24): )
opLBrace(10:25-10:26): {
kwThis(11:5-11:9): this
opDot(11:9-11:10): .
litId(11:10-11:16): _nodes
opEq(11:17-11:18): =
litId(11:19-11:24): nodes
opRBrace(12:3-12:4): }
kwPub(14:3-14:6): pub
kwMut(14:7-14:10): mut
kwFn(14:11-14:13): fn
litId(14:14-14:17): add
opLPar(14:18-14:19): (
litId(14:19-14:23): node
opColon(14:23-14:24): :
litId(14:25-14:29): Node
opRPar(14:29-14:30): )
kwThis(14:31-14:35): this
opLBrace(14:36-14:37): {
kwThis(15:5-15:9): this
opDot(15:9-15:10): .
litId(15:10-15:16): _nodes
opDot(15:16-15:17): .
litId(15:17-15:21): push
opLPar(15:21-15:22): (
litId(15:22-15:26): node
opRPar(15:26-15:27): )
kwReturn(16:5-16:11): return
kwThis(16:12-16:16): this
opRBrace(17:3-17:4): }
kwPub(19:3-19:6): pub
kwMut(19:7-19:10): mut
kwFn(19:11-19:13): fn
litId(19:14-19:20): remove
opLPar(19:21-19:22): (
litId(19:22-19:24): at
opColon(19:24-19:25): :
litId(19:26-19:29): int
opRPar(19:29-19:30): )
kwThis(19:31-19:35): this
opLBrace(19:36-19:37): {
kwThis(20:5-20:9): this
opDot(20:9-20:10): .
litId(20:10-20:16): _nodes
opDot(20:16-20:17): .
litId(20:17-20:23): remove
opLPar(20:23-20:24): (
litId(20:24-20:26): at
opRPar(20:26-20:27): )
kwReturn(21:5-21:11): return
kwThis(21:12-21:16): this
opRBrace(22:3-22:4): }
opRBrace(23:1-23:2): }
kwMain(25:1-25:5): main
opLBrace(25:6-25:7): {
litId(26:3-26:8): node1
opColonEq(26:9-26:11): :=
litId(26:12-26:16): Node
opLBrace(26:16-26:17): {
litId(26:17-26:20): val
opColon(26:20-26:21): :
litIntDec(26:22-26:23): 1
opRBrace(26:23-26:24): }
litId(27:3-27:8): node2
opColonEq(27:9-27:11): :=
litId(27:12-27:16): Node
opLBrace(27:16-27:17): {
litId(27:17-27:20): val
opColon(27:20-27:21): :
litIntDec(27:22-27:23): 2
opRBrace(27:23-27:24): }
litId(29:3-29:8): node3
opColonEq(29:9-29:11): :=
litId(29:12-29:16): Node
opLBrace(29:17-29:18): {
litId(30:5-30:9): left
opColon(30:9-30:10): :
litId(30:11-30:16): node1
opComma(30:16-30:17): ,
litId(31:5-31:10): right
opColon(31:10-31:11): :
litId(31:12-31:17): node2
opComma(31:17-31:18): ,
litId(32:5-32:8): val
opColon(32:8-32:9): :
litIntDec(32:10-32:11): 3
opRBrace(33:3-33:4): }
litId(35:3-35:8): node4
opColonEq(35:9-35:11): :=
litId(35:12-35:16): Node
opLBrace(35:16-35:17): {
litId(35:17-35:20): val
opColon(35:20-35:21): :
litIntDec(35:22-35:23): 4
opRBrace(35:23-35:24): }
litId(36:3-36:8): node5
opColonEq(36:9-36:11): :=
litId(36:12-36:16): Node
opLBrace(36:16-36:17): {
litId(36:17-36:20): val
opColon(36:20-36:21): :
litIntDec(36:22-36:23): 5
opRBrace(36:23-36:24): }
kwMut(38:3-38:6): mut
litId(38:7-38:11): tree
opColonEq(38:12-38:14): :=
kwNew(38:15-38:18): new
litId(38:19-38:23): Tree
opLPar(38:23-38:24): (
litId(38:24-38:29): node3
opComma(38:29-38:30): ,
litId(38:31-38:36): node4
opRPar(38:36-38:37): )
litId(40:3-40:7): tree
opDot(40:7-40:8): .
litId(40:8-40:11): add
opLPar(40:11-40:12): (
litId(40:12-40:17): node5
opRPar(40:17-40:18): )
litId(41:3-41:7): tree
opDot(41:7-41:8): .
litId(41:8-41:11): add
opLPar(41:11-41:12): (
litId(41:12-41:16): Node
opLBrace(41:16-41:17): {
litId(41:17-41:20): val
opColon(41:20-41:21): :
litIntDec(41:22-41:23): 6
opRBrace(41:23-41:24): }
opRPar(41:24-41:25): )
litId(42:3-42:7): tree
opDot(42:7-42:8): .
litId(42:8-42:14): remove
opLPar(42:14-42:15): (
litIntDec(42:15-42:16): 1
opRPar(42:16-42:17): )
litId(43:3-43:7): tree
opDot(43:7-43:8): .
litId(43:8-43:14): remove
opLPar(43:14-43:15): (
litIntDec(43:15-43:16): 2
opRPar(43:16-43:17): )
opRBrace(44:1-44:2): }
