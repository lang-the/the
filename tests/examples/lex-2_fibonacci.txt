kwFn(1:1-1:3): fn
litId(1:4-1:13): fibonacci
opLPar(1:14-1:15): (
litId(1:15-1:18): max
opColon(1:18-1:19): :
litId(1:20-1:23): int
opRPar(1:23-1:24): )
litId(1:25-1:28): int
opLBrack(1:28-1:29): [
opRBrack(1:29-1:30): ]
opLBrace(1:31-1:32): {
kwMut(2:3-2:6): mut
litId(2:7-2:13): result
opColonEq(2:14-2:16): :=
opLBrack(2:17-2:18): [
litIntDec(2:18-2:19): 0
opComma(2:19-2:20): ,
litIntDec(2:21-2:22): 1
opRBrack(2:22-2:23): ]
kwLoop(4:3-4:7): loop
litId(4:8-4:9): i
kwIn(4:10-4:12): in
litIntDec(4:13-4:14): 2
opDotDotEq(4:15-4:18): ..=
litId(4:19-4:22): max
opLBrace(4:23-4:24): {
litId(5:5-5:11): result
opDot(5:11-5:12): .
litId(5:12-5:16): push
opLPar(5:16-5:17): (
litId(5:17-5:23): result
opLBrack(5:23-5:24): [
litId(5:24-5:25): i
opMinus(5:26-5:27): -
litIntDec(5:28-5:29): 2
opRBrack(5:29-5:30): ]
opPlus(5:31-5:32): +
litId(5:33-5:39): result
opLBrack(5:39-5:40): [
litId(5:40-5:41): i
opMinus(5:42-5:43): -
litIntDec(5:44-5:45): 1
opRBrack(5:45-5:46): ]
opRPar(5:46-5:47): )
opRBrace(6:3-6:4): }
kwReturn(8:3-8:9): return
litId(8:10-8:16): result
opRBrace(9:1-9:2): }
kwMain(11:1-11:5): main
opLBrace(11:6-11:7): {
litId(12:3-12:8): print
opLPar(12:8-12:9): (
litStr(12:9-12:30): "Fibonacci sequence:"
opComma(12:30-12:31): ,
litId(12:32-12:41): fibonacci
opLPar(12:41-12:42): (
litIntDec(12:42-12:44): 50
opRPar(12:44-12:45): )
opRPar(12:45-12:46): )
opRBrace(13:1-13:2): }
