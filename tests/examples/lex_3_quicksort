KW_IMPORT: import
LIT_ID: swap
KW_FROM: from
LIT_ID: utils
KW_FN: fn
LIT_ID: quicksort
OP_LPAR: (
KW_MUT: mut
LIT_ID: arr
OP_COLON: :
LIT_ID: int
OP_LBRACK: [
OP_RBRACK: ]
OP_COMMA: ,
LIT_ID: begin
OP_COLONEQ: :=
LIT_INT_DEC: 0
OP_COMMA: ,
LIT_ID: end
OP_COLONEQ: :=
LIT_ID: arr
OP_DOT: .
LIT_ID: len
OP_RPAR: )
OP_LBRACE: {
KW_IF: if
LIT_ID: arr
OP_DOT: .
LIT_ID: len
OP_LT: <
LIT_INT_DEC: 2
OP_OROR: ||
LIT_ID: begin
OP_GTEQ: >=
LIT_ID: end
OP_LBRACE: {
KW_RETURN: return
OP_RBRACE: }
KW_MUT: mut
LIT_ID: i
OP_COLONEQ: :=
LIT_ID: begin
KW_LOOP: loop
LIT_ID: j
KW_IN: in
LIT_ID: begin
OP_PLUS: +
LIT_INT_DEC: 1
OP_DOTDOT: ..
LIT_ID: end
OP_PLUS: +
LIT_INT_DEC: 1
OP_LBRACE: {
KW_IF: if
LIT_ID: arr
OP_LBRACK: [
LIT_ID: j
OP_RBRACK: ]
OP_LTEQ: <=
LIT_ID: arr
OP_LBRACK: [
LIT_ID: begin
OP_RBRACK: ]
OP_LBRACE: {
LIT_ID: i
OP_PLUSPLUS: ++
LIT_ID: swap
OP_LPAR: (
LIT_ID: arr
OP_LBRACK: [
LIT_ID: i
OP_RBRACK: ]
OP_COMMA: ,
LIT_ID: arr
OP_LBRACK: [
LIT_ID: j
OP_RBRACK: ]
OP_RPAR: )
OP_RBRACE: }
OP_RBRACE: }
LIT_ID: swap
OP_LPAR: (
LIT_ID: arr
OP_LBRACK: [
LIT_ID: begin
OP_RBRACK: ]
OP_COMMA: ,
LIT_ID: arr
OP_LBRACK: [
LIT_ID: i
OP_RBRACK: ]
OP_RPAR: )
LIT_ID: quicksort
OP_LPAR: (
LIT_ID: arr
OP_COMMA: ,
LIT_ID: begin
OP_COMMA: ,
LIT_ID: i
OP_MINUS: -
LIT_INT_DEC: 1
OP_RPAR: )
LIT_ID: quicksort
OP_LPAR: (
LIT_ID: arr
OP_COMMA: ,
LIT_ID: i
OP_PLUS: +
LIT_INT_DEC: 1
OP_COMMA: ,
LIT_ID: end
OP_RPAR: )
OP_RBRACE: }
KW_MAIN: main
OP_LBRACE: {
KW_MUT: mut
LIT_ID: arr
OP_COLONEQ: :=
OP_LBRACK: [
LIT_INT_DEC: 3
OP_COMMA: ,
LIT_INT_DEC: 4
OP_COMMA: ,
LIT_INT_DEC: 1
OP_COMMA: ,
LIT_INT_DEC: 8
OP_COMMA: ,
LIT_INT_DEC: 6
OP_COMMA: ,
LIT_INT_DEC: 7
OP_COMMA: ,
LIT_INT_DEC: 5
OP_COMMA: ,
LIT_INT_DEC: 10
OP_COMMA: ,
LIT_INT_DEC: 9
OP_COMMA: ,
LIT_INT_DEC: 2
OP_RBRACK: ]
LIT_ID: print
OP_LPAR: (
LIT_STR: "Array before quicksort:"
OP_COMMA: ,
LIT_ID: arr
OP_RPAR: )
LIT_ID: quicksort
OP_LPAR: (
LIT_ID: arr
OP_RPAR: )
LIT_ID: print
OP_LPAR: (
LIT_STR: "Array after quicksort:"
OP_COMMA: ,
LIT_ID: arr
OP_RPAR: )
OP_RBRACE: }
